// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NorthboundeiAPI.Database;

#nullable disable

namespace NorthboundeiAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("NorthboundeiAPI.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsOnline")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("PasswordExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TimeZone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("UserStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("NorthboundeiAPI.Models.ServiceAuthTbl", b =>
                {
                    b.Property<string>("AuthorizationStatus")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("authorization_status");

                    b.Property<string>("CaseReference")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("case_reference");

                    b.Property<string>("CoVisitAllowed")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .HasColumnName("coVisitAllowed")
                        .IsFixedLength();

                    b.Property<int?>("CovisitsRemaining")
                        .HasColumnType("int")
                        .HasColumnName("covisitsRemaining");

                    b.Property<string>("DxCode")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("dxCode");

                    b.Property<string>("DxCode2")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("dxCode2");

                    b.Property<string>("DxCode3")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("dxCode3");

                    b.Property<string>("DxCode4")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("dxCode4");

                    b.Property<string>("DxCode5")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("dxCode5");

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("end_date");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("last_name");

                    b.Property<int?>("MakeUpsRemaining")
                        .HasColumnType("int")
                        .HasColumnName("makeUpsRemaining");

                    b.Property<string>("MakeupVisitAllowed")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .HasColumnName("makeupVisitAllowed")
                        .IsFixedLength();

                    b.Property<string>("MinutesPerSession")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .HasColumnName("minutes_per_session")
                        .IsFixedLength();

                    b.Property<string>("Municipality")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("municipality");

                    b.Property<int?>("NumberCoVisits")
                        .HasColumnType("int")
                        .HasColumnName("numberCoVisits");

                    b.Property<int?>("NumberMakeUps")
                        .HasColumnType("int")
                        .HasColumnName("numberMakeUps");

                    b.Property<string>("NumberVisitsRemaining")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .HasColumnName("numberVisitsRemaining")
                        .IsFixedLength();

                    b.Property<string>("NyeisId")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("nyeis_id");

                    b.Property<string>("Objectives")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("objectives");

                    b.Property<string>("Objectives2")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("objectives2");

                    b.Property<string>("Objectives3")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("objectives3");

                    b.Property<string>("Outcomes")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("outcomes");

                    b.Property<string>("Outcomes2")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("outcomes2");

                    b.Property<string>("Outcomes3")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("outcomes3");

                    b.Property<string>("PerWm")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .HasColumnName("perWM")
                        .IsFixedLength();

                    b.Property<string>("ProviderNpi")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("provider_npi");

                    b.Property<DateOnly?>("ServiceAuthEnd")
                        .HasColumnType("date")
                        .HasColumnName("serviceAuthEnd");

                    b.Property<DateOnly?>("ServiceAuthStart")
                        .HasColumnType("date")
                        .HasColumnName("serviceAuthStart");

                    b.Property<string>("ServiceAuthorization")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("service_authorization");

                    b.Property<string>("ServiceType")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("service_type");

                    b.Property<DateOnly?>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("start_date");

                    b.Property<string>("UnitsApproved")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .HasColumnName("units_approved")
                        .IsFixedLength();

                    b.Property<string>("UnitsAuthorized")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .HasColumnName("units_authorized")
                        .IsFixedLength();

                    b.ToTable("service_auth_tbl", (string)null);
                });

            modelBuilder.Entity("NorthboundeiAPI.Models.SessionNoteTbl", b =>
                {
                    b.Property<string>("Additional")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("additional");

                    b.Property<string>("AttendanceType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Attendance_type");

                    b.Property<string>("CoVisitPresent")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CoVisit_present");

                    b.Property<DateOnly?>("DateNoteWritten")
                        .HasColumnType("date")
                        .HasColumnName("date_note_written");

                    b.Property<string>("Describe")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("describe");

                    b.Property<string>("DraftFinal")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Draft_Final");

                    b.Property<string>("EiNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("EI_number");

                    b.Property<string>("HowWork")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("how_work");

                    b.Property<string>("HowWorkOther")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("How_work_other");

                    b.Property<string>("Icd10Code")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ICD10_code");

                    b.Property<string>("License")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MakeUpFor")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("make_up_for");

                    b.Property<string>("MakeUpSession")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .HasColumnName("make_up_session")
                        .IsFixedLength();

                    b.Property<string>("Npi")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("NPI");

                    b.Property<string>("Outcomes")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("outcomes");

                    b.Property<string>("ParentDate")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("parent_date");

                    b.Property<string>("ParentGps")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("parent_gps");

                    b.Property<string>("ParentImg")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("parent_img");

                    b.Property<string>("ParentTimeStamp")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("parent_time_stamp");

                    b.Property<string>("ParticipantOther")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("participant_other");

                    b.Property<string>("ParticipantUnavailble")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("participant_unavailble");

                    b.Property<string>("Participants")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("participants");

                    b.Property<string>("Qa")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("QA");

                    b.Property<string>("Relationship")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("relationship");

                    b.Property<string>("RelationshipOther")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Relationship_other");

                    b.Property<string>("Routine")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("routine");

                    b.Property<string>("RoutineOther")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Routine_other");

                    b.Property<string>("Section5")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("section_5");

                    b.Property<string>("ServiceAuthorization")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Service_authorization");

                    b.Property<string>("ServiceLocation")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("service_location");

                    b.Property<string>("ServiceLogGps")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("service_log_gps");

                    b.Property<string>("ServiceLogImg")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("service_log_img");

                    b.Property<DateTime?>("ServiceLogTimestamp")
                        .HasColumnType("datetime")
                        .HasColumnName("service_log_timestamp");

                    b.Property<string>("ServiceType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("service_type");

                    b.Property<string>("SessionCancelled")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .HasColumnName("session_cancelled")
                        .IsFixedLength();

                    b.Property<string>("SessionCpt1")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("session_cpt1");

                    b.Property<string>("SessionCpt1Units")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .HasColumnName("session_cpt1_units")
                        .IsFixedLength();

                    b.Property<string>("SessionCpt2")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("session_cpt2");

                    b.Property<string>("SessionCpt2Units")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .HasColumnName("session_cpt2_units")
                        .IsFixedLength();

                    b.Property<string>("SessionCpt3")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("session_cpt3");

                    b.Property<string>("SessionCpt3Units")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .HasColumnName("session_cpt3_units")
                        .IsFixedLength();

                    b.Property<string>("SessionCpt4")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("session_cpt4");

                    b.Property<string>("SessionCpt4Units")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .HasColumnName("session_cpt4_units")
                        .IsFixedLength();

                    b.Property<DateOnly?>("SessionDate")
                        .HasColumnType("date")
                        .HasColumnName("session_date");

                    b.Property<string>("SessionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("sessionID");

                    b.Property<string>("SessionMadeupBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("session_madeup_by");

                    b.Property<string>("SessionNoteType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("sessionNote_type");

                    b.Property<string>("SessionSection")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("session_section");

                    b.Property<string>("Strategies")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("strategies");

                    b.Property<string>("StrategiesOther")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Strategies_other");

                    b.Property<string>("TherapistDate")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("therapist_date");

                    b.Property<string>("TherapistGps")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Therapist_gps");

                    b.Property<string>("TherapistImg")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("therapist_img");

                    b.Property<string>("TherapistTimeStamp")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("therapist_time_stamp");

                    b.Property<TimeOnly?>("TimeFrom")
                        .HasColumnType("time")
                        .HasColumnName("time_from");

                    b.Property<TimeOnly?>("TimeSpent")
                        .HasColumnType("time");

                    b.Property<TimeOnly?>("TimeTo")
                        .HasColumnType("time")
                        .HasColumnName("time_to");

                    b.ToTable("session_note_tbl", (string)null);
                });

            modelBuilder.Entity("NorthboundeiAPI.Models.UserInfoTbl", b =>
                {
                    b.Property<string>("Credentials")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("last_name");

                    b.Property<string>("LicenseNo")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("license_no");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("middle_name");

                    b.Property<string>("NpiNo")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("npi_no");

                    b.Property<string>("ProviderId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("provider_id");

                    b.ToTable("user_info_tbl", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("NorthboundeiAPI.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("NorthboundeiAPI.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NorthboundeiAPI.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("NorthboundeiAPI.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
